library("rJava", lib.loc="./R/win-library/3.1")
library("rJava", lib.loc="./R/win-library/3.1/rJava")
library("rJava", lib.loc="./R/win-library/3.1")
install.packages("r-cran-rjava")
library("xlsx", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
detach("package:xlsx", unload=TRUE)
detach("package:xlsxjars", unload=TRUE)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
library("xlsx", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
library("xlsxjars", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
detach("package:xlsxjars", unload=TRUE)
detach("package:xlsx", unload=TRUE)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
library("xlsxjars", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
detach("package:xlsxjars", unload=TRUE)
detach("package:rJava", unload=TRUE)
library("xlsx", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
library(httr)
install.packages("httr")
library("httr", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
install.packages("httpuv")
library("httpuv", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
oauth_endpoints("github")
myapp <- oauth_app("github", "acd7c78560a346094b9b")
myapp <- oauth_app("github", "acd7c78560a346094b9b", "183679a0b270c2b646447fbde7d9eabde72be984")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
ordenado <- fromJSON(toJSON(req))
install.packages("jsonlite")
ordenado <- fromJSON(toJSON(req))
library("jsonlite", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
ordenado <- fromJSON(toJSON(req))
ordenado <- toJSON(req)
ordenado <- toJSON(req, pretty=TRUE)
library("XML", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
ordenado <- fromJSON(toJSON(req))
ordenado <- toJSON(req, pretty=TRUE)
ordenado <- toJSON(asJson(req), pretty=TRUE)
ordenado <- toJSON(req, pretty=TRUE)
ordenado <- fromJSON(req)
content(req)
ordenado <- fromJSON(content(req))
ordenado <- fromJSON(toJSON(content(req)))
ordenado
View(ordenado)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="./Quiz2Ans2.csv")
acs <- read.csv("./Quiz2Ans2.csv")
install.packages("sqldf")
library("sqldf", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
sqldf("select pwgtp1 from acs where AGEP < 50")
View(acs)
resultado1<-sqldf("select pwgtp1 from acs where AGEP < 50")
View(resultado1)
sqldf("select distinct AGEP from acs")
codigo <- readLines(url(http://biostat.jhsph.edu/~jleek/contact.html))
codigo <- readLines(url("http://biostat.jhsph.edu/~jleek/contact.html"))
nchar(codigo[10])
nchar(codigo[20])
nchar(codigo[30])
nchar(codigo[100])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "./wksst8110.for", mode="wb")
cwd()
cwd
cwd?
cwd()
wd()
archivo <- read.fwf("./wksst8110.for", sep=" ", header=FALSE, skip=5)
read.fwf("./wksst8110.for", widths=c(9,8,8,8,8), sep=" ", header=FALSE, skip=5)
archivo <- read.fwf("./wksst8110.for", widths=c(9,8,8,8,8), sep=" ", header=FALSE, skip=5)
archivo <- read.fwf("./wksst8110.for", widths=c(9,8,8,8,8), sep="     ", header=FALSE, skip=5)
archivo <- read.fwf("./wksst8110.for", widths=c(9,5,8,5,8,5,8,5,8), sep="     ", header=FALSE, skip=5)
archivo <- read.fwf("./wksst8110.for", widths=c(9,5,8,5,8,5,8,5,8), sep=" ", header=FALSE, skip=5)
archivo <- read.fwf("./wksst8110.for", widths=c(9,8,8,8,8), sep=" ", header=FALSE, skip=5)
ancho<-c(9,8,8,8,8)
class(ancho)
type(ancho)
summary(ancho)
str(ancho)
ancho<-cL(9,8,8,8,8)
ancho<-L(9,8,8,8,8)
ancho<-c(L9,L8,L8,L8,L8)
ancho<-c(9L,L8,L8,L8,L8)
ancho<-c(9L,8L,8L,8L,8L)
str(ancho)
archivo <- read.fwf("./wksst8110.for", ancho, sep=" ", header=FALSE, skip=5)
ancho<-c(10L,8L,8L,8L,8L)
archivo <- read.fwf("./wksst8110.for", ancho, sep=" ", header=FALSE, skip=5)
?read.fwf
ff <- tempfile()
cat(file=ff, "123456", "987654", sep="\n")
read.fwf(ff, width=c(1,2,3))    #> 1 23 456 \ 9 87 654
unlink(ff)
archivo <- read.fwf("./wksst8110.for", ancho, header=FALSE, skip=5)
View(archivo)
archivo <- read.fwf("./wksst8110.for", ancho, header=FALSE, skip=4)
View(archivo)
View(archivo)
ancho<-c(10L,5L,8L,8L,8L,8L)
archivo <- read.fwf("./wksst8110.for", ancho, header=FALSE, skip=4)
View(archivo)
View(archivo)
ancho<-c(10L,5L,8L,5L,8L,5L,8L,5L,8L)
archivo <- read.fwf("./wksst8110.for", ancho, header=FALSE, skip=4)
View(archivo)
View(archivo)
ancho<-c(10L,5L,4L,4L, 5L,4L,4L,5L,4L, 4L,5L,4L,4L)
archivo <- read.fwf("./wksst8110.for", ancho, header=FALSE, skip=4)
View(archivo)
View(archivo)
colSums(archivo[,6])
colSums(archivo[6])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="./Quiz3FGDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="./Quiz3Country.csv")
FGDP<-read.file("./Quiz3FGDP.csv")
FGDP<-read.csv("./Quiz3FGDP.csv")
COUNTRY<-read.csv("./Quiz3Country.csv")
View(COUNTRY)
View(FGDP)
merge(FGDP, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
Nueva<-merge(FGDP, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
FGDP<-read.csv("./Quiz3FGDP.csv", skip=4)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE,skip=4)
View(COUNTRY)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, blank.lines.skip = TRUE)
View(FGDP)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, skip=2,blank.lines.skip = TRUE)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, skip=3,blank.lines.skip = TRUE)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, skip=3,na.strings = "NA", blank.lines.skip = TRUE)
View(FGDP)
Nueva<-merge(FGDP, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
View(COUNTRY)
View(Nueva)
View(FGDP)
Nueva<-merge(FGDP, COUNTRY, by.x="X", by.y="CountryCode", all=TRUE)
View(Nueva)
Nueva<-merge(FGDP, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
View(COUNTRY)
View(Nueva)
View(COUNTRY)
View(FGDP)
View(FGDP)
Nueva<-merge(COUNTRY, FGDP, by.x="CountryCode", by.y="X", all=FALSE)
View(Nueva)
View(COUNTRY)
View(COUNTRY)
View(FGDP)
View(Nueva)
View(FGDP)
View(COUNTRY)
Nueva2<-Nueva[Nueva$Income.Group =="",]
View(Nueva2)
Nueva2<-Nueva[Nueva$Income.Group !="",]
View(Nueva2)
View(COUNTRY)
View(Nueva2)
View(FGDP)
FGDP$Ranking<-as.numeric(FGDP$Ranking)
View(FGDP)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, skip=3,na.strings = "NA", blank.lines.skip = TRUE)
View(FGDP)
View(FGDP)
FGDP2<-FGDP
FGDP2$Ranking<-as.numeric(FGDP$Ranking)
View(FGDP2)
View(FGDP)
View(FGDP2)
FGDP2$Ranking<-as.numeric(FGDP$Ranking)
FGDP2<-FGDP
transform(FGDP2, ranking = as.numeric(ranking))
transform(FGDP2, Ranking = as.numeric(Ranking))
FGDP2<-FGDP
View(FGDP2)
transform(FGDP2, Ranking = as.numeric(Ranking))
FGDP2<-FGDP
transform(FGDP2, Ranking = as.char(Ranking))
transform(FGDP2, Ranking = as.character(Ranking))
View(FGDP2)
View(FGDP2)
transform(FGDP2, Ranking = as.numeric(Ranking))
View(FGDP2)
View(FGDP2)
View(FGDP2)
transform(FGDP2, Ranking = as.numeric(Ranking))
FGGP2$Ranking<-as.character(FGDP2$Ranking)
FGdP2$Ranking<-as.character(FGDP2$Ranking)
FGDP2$Ranking<-as.character(FGDP2$Ranking)
View(FGDP2)
View(FGDP2)
FGDP2$Ranking<-as.numeric(FGDP2$Ranking)
View(FGDP2)
FGDP2<-FGDP2[FGDP2$Ranking !="NA",]
View(FGDP2)
FGDP2<-FGDP2[FGDP2$Ranking !=NA,]
View(FGDP2)
FGDP2<-FGDP
FGDP2$Ranking<-as.character(FGDP2$Ranking)
FGDP2$Ranking<-as.numeric(FGDP2$Ranking)
View(FGDP2)
FGDP2<-FGDP2[FGDP2$Ranking !=NA,]
FGDP2<-FGDP
FGDP2$Ranking<-as.character(FGDP2$Ranking)
FGDP2$Ranking<-as.numeric(FGDP2$Ranking)
FGDP3<-FGDP2[FGDP2$Ranking !=NA,]
View(FGDP3)
FGDP3<-FGDP2[is.na(FGDP2$Ranking),]
View(FGDP3)
FGDP3<-FGDP2[!is.na(FGDP2$Ranking),]
View(FGDP3)
FGDP2<-FGDP
FGDP$Ranking<-as.character(FGDP$Ranking)
FGDP$Ranking<-as.numeric(FGDP$Ranking)
FGDP3<-FGDP2[!is.na(FGDP2$Ranking),]
Nueva<-merge(FGDP3, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(FGDP3)
View(Nueva)
FGDP<-read.csv("./Quiz3FGDP.csv", header=TRUE, skip=3,na.strings = "NA", blank.lines.skip = TRUE)
FGDP2<-FGDP
FGDP2$Ranking<-as.character(FGDP2$Ranking)
FGDP2$Ranking<-as.numeric(FGDP2$Ranking)
FGDP3<-FGDP2[!is.na(FGDP2$Ranking),]
View(FGDP3)
Nueva<-merge(FGDP3, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
View(Nueva)
FGDP2<-FGDP
FGDP2$Ranking<-as.character(FGDP2$Ranking)
FGDP2$Ranking<-as.numeric(FGDP2$Ranking)
FGDP3<-FGDP2[!is.na(FGDP2$Ranking),]
View(FGDP3)
Nueva<-merge(FGDP3, COUNTRY, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
View(Nueva)
View(FGDP3)
View(Nueva)
library("plyr", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
arrange(Nueva,X)
View(Nueva)
arrange(Nueva,Ranking)
View(Nueva)
View(Nueva)
Nueva2<-arrange(Nueva,Ranking)
View(Nueva2)
View(FGDP3)
View(COUNTRY)
View(FGDP3)
View(COUNTRY)
COUNTRY2<-COUNTRY[COUNTRY$Income.Group !="",]
View(COUNTRY2)
Nueva<-merge(FGDP3, COUNTRY2, by.x="X", by.y="CountryCode")
View(Nueva)
Nueva<-merge(FGDP3, COUNTRY2, by.x="X", by.y="CountryCode", all=TRUE)
View(Nueva)
View(COUNTRY2)
Nueva<-merge(FGDP3, COUNTRY2, by.x="X", by.y="CountryCode", all=FALSE)
View(Nueva)
Nueva2<-arrange(Nueva,-Ranking)
View(Nueva2)
Nueva2[13,]
View(Nueva2)
Nueva2[13,1:10]
dcast(Nueva2, Income.Group ~ Ranking)
library("reshape2", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
dcast(Nueva2, Income.Group ~ Ranking)
dcast(Nueva2, Income.Group ~ Ranking, mean)
ddply(Nueva2, .(Income.Group), summarize, mean(Ranking)
)
ddply(Nueva2, .(Income.Group), summarize, mean(Ranking))
quantile(Nueva2$Income.Group)
ddply(Nueva2, .(Income.Group), summarize, quantile(Ranking))
install.packages("Hmisc")
library("Hmisc", lib.loc="C:/Users/AAlberto/Documents/R/win-library/3.1")
cut2(Nueva2$Income.group, g=5)
x<-cut2(Nueva2$Income.group, g=5, )
x<-cut2(Nueva2$Income.group, g=5 )
x<-cut2(Nueva2$Income.group, g=5)
cut2(Nueva2$Ranking, g=5)
Nueva3<-Nueva2
Nueva3$RankQuan<-cut2(Nueva3$Ranking, g=5)
table(Nueva3$Income.Group, Nueva3$RankQuan)
table(Nueva3$RankQuan,Nueva3$Income.Group)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="./Quiz4Q02.csv")
Q02<-read.csv("./Quiz4Q02.csv", skip=3)
Q02[,"Ranking"]<-as.character(Q02[,"Ranking"])
Q02[,"Ranking"]<-as.numeric(Q02[,"Ranking"])
Q0202<-subset(Q02, !is.na(Ranking))
View(`Q0202`)
View(`Q0202`)
gsub(",", "", Q0202["US.dollars."])
View(`Q0202`)
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
View(`Q0202`)
x<-gsub(",", "", Q0202["US.dollars."])
Q0202["US.dollars."]<-gsub(",", "", Q0202["US.dollars."])
View(`Q0202`)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="./Quiz4Q02.csv")
Q02<-read.csv("./Quiz4Q02.csv", skip=3)
Q02[,"Ranking"]<-as.character(Q02[,"Ranking"])
Q02[,"Ranking"]<-as.numeric(Q02[,"Ranking"])
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
View(`Q0202`)
Q0202["US.dollars.",]<-gsub(",", "", Q0202["US.dollars.",])
Q0202["US.dollars.",]<-gsub(",", "", Q0202["US.dollars.",])
View(`Q0202`)
Q02<-read.csv("./Quiz4Q02.csv", skip=3)
Q02[,"Ranking"]<-as.character(Q02[,"Ranking"])
Q02[,"Ranking"]<-as.numeric(Q02[,"Ranking"])
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
Q0202["US.dollars.",]<-gsub(",", "", Q0202["US.dollars.",])
View(`Q0202`)
Q02<-read.csv("./Quiz4Q02.csv", skip=3)
Q02[,"Ranking"]<-as.character(Q02[,"Ranking"])
Q02[,"Ranking"]<-as.numeric(Q02[,"Ranking"])
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
View(`Q0202`)
Q0202["US.dollars."]<-gsub(",", "", Q0202["US.dollars.",])
View(`Q0202`)
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
View(`Q0202`)
Q0202["US.dollars.",]<-gsub(",", "", Q0202["US.dollars.",])
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
Q0202<-subset(Q02, !is.na(Ranking))
Q0202$US.dollars.<-as.character(Q0202[,"US.dollars."])
View(`Q0202`)
View(`Q0202`)
Q0202$US.dollars.<-gsub(",", "", Q0202["US.dollars.",])
View(`Q0202`)
Q0202<-subset(Q02, !is.na(Ranking))
Q0202[,"US.dollars."]<-as.character(Q0202[,"US.dollars."])
Q0202[1,"US.dollars."]<-gsub(",", "", Q0202[1,"US.dollars."])
View(`Q0202`)
Q0202[,"US.dollars."]<-gsub(",", "", Q0202[,"US.dollars."])
View(`Q0202`)
View(`Q0202`)
Q0202[,"US.dollars."]<-as.numeric(Q0202[,"US.dollars."])
View(`Q0202`)
colmenas(Q0202$US.dollars.)
colMeans(Q0202$US.dollars.)
colMeans(Q0202[,"US.dollars."])
colMeans(Q0202[)
colMeans(Q0202)
colMeans(Q0202)
colMeans(Q0202$US.dollars.)
mean(Q0202$US.dollars.)
countryNAmes<-Q0202["Economy"]
View(countryNAmes)
countryNAmes<-as.vector(Q0202["Economy"])
View(countryNAmes)
countryNAmes<-as.vector(Q0202[,"Economy"])
grep("^United",countryNames)
countryNames<-as.vector(Q0202[,"Economy"])
grep("^United",countryNames)
version
version
version
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator= rbinom(4601, size =1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainIndicator ==1, ]
testSpam=spam[trainIndicator ==0, ]
names(trainSpam)
setwd("~/GitHub/RepData_PeerAssessment1")
# Unzip de activity.zip file that contains the Dataset to be used
unzip("activity.zip")
# Loads the data in a dataframe called data01
data01 = read.csv("activity.csv")
# Calculate total steps per day
daily_steps=tapply(data01$steps, data01$date, sum)
# histogram of the total number of steps taken each day
hist(daily_steps)
# Calculate the mean of the total number of steps taken per day
mean(daily_steps, na.rm=TRUE)
# Calculate the median of the total number of steps taken per day
median(daily_steps, na.rm=TRUE)
summary(daily_steps)
summary(daily_steps$Median)
summary(daily_steps[Median])
summary(daily_steps["Median"])
summary(daily_steps[3])
summary(daily_steps)["Median"]
mean(daily_steps)
interval_steps=tapply(data01$steps, data01$interval, sum)
mean(interval_steps, na.rm=TRUE)
hist(interval_steps)
mean(interval_steps)
interval_steps=tapply(data01$steps, data01$interval, sum, na.rm=TRUE)
interval_steps2=tapply(data01$steps, data01$interval, sum)
mean(interval_steps)
hist(interval_steps)
plot(interval_steps)
plot(interval_steps, type="l")
daily_steps=tapply(data01$steps, data01$date, sum, na.rm=TRUE)
hist(daily_steps)
mean(daily_steps, na.rm=TRUE)
daily_steps=tapply(data01$steps, data01$date, sum)
hist(daily_steps)
daily_steps=tapply(data01$steps, data01$date, sum)
daily_steps=tapply(data01$steps, data01$date, sum, na.rm=TRUE)
hist(daily_steps)
daily_steps=tapply(data01$steps, data01$date, sum)
which.max(interval_steps)
hist(interval_steps)
plot(interval_steps, type="l")
which.max(interval_steps)
prueba=rbind(interval_steps)
View(prueba)
prueba=data.frame(interval_steps)
View(prueba)
interval_steps2=tapply(data01$steps, data01$interval, sum)
prueba2=data.frame(interval_steps2)
View(prueba2)
rm(prueba2)
rm(interval_steps2)
which.max(interval_steps)
which.max(interval_steps)[1]
which.max(prueba2)
which.max(prueba)
interval_steps=sapply(data01$steps, data01$interval, sum, na.rm=TRUE)
interval_steps=tapply(data01$steps, data01$interval, sum, na.rm=TRUE)
dimnames(interval_steps)
which.max(interval_steps, names=False)
which.max(interval_steps, useNames=False)
which.max(interval_steps)
which.max(interval_steps)[1]
which.max(interval_steps)[1,1]
which.max(interval_steps)[1]
which.max(interval_steps)[2]
which.max(interval_steps)[1][1]
which.max(interval_steps)(1)
which(interval_steps == max(interval_steps))
which(interval_steps == max(interval_steps), useNames=Fales)
which(interval_steps == max(interval_steps), useNames=FALSE)
which(interval_steps == max(interval_steps), arr.ind=TRUE)
which.max(interval_steps)
dim(which.max(interval_steps))
which(interval_steps == max(interval_steps), arr.ind=TRUE)[1]
which(interval_steps == max(interval_steps), arr.ind=TRUE)[0]
which(interval_steps == max(interval_steps), arr.ind=FASE)
which(interval_steps == max(interval_steps), arr.ind=FALSE)
which(interval_steps == max(interval_steps), arr.ind=TRUE)
which(interval_steps == max(interval_steps), arr.ind=TRUE)[1,1]
dimnames(which.max(interval_steps))
which.max(interval_steps)
names(which.max(interval_steps))
x=which.max(interval_steps)
x<-x+1
x
x=names(which.max(interval_steps))
interval_steps=tapply(data01$steps, data01$interval, sum, na.rm=TRUE)
mean(interval_steps)
hist(interval_steps)
plot(interval_steps, type="l")
names(which.max(interval_steps))
strtoi(names(which.max(interval_steps)))
interval0=strtoi(names(which.max(interval_steps)))
interval0=as.integer(names(which.max(interval_steps)))
hour0=interval0/100
hour0=round(interval0/100)
minutes0=interval0-hou0
minutes0=interval0-hou0
hour0<-round(interval0/100)
minutes0<-interval0-hou0
minutes0<-interval0-hour0)
minutes0<-interval0-hour0
minutes0<-interval0-(hour0*100)
interval1=interval0+1
interval1=interval0+5
hour1<-round(interval1/100)
minutes1<-interval1-(hour1*100)
interval_steps=tapply(data01$steps, data01$interval, mean, na.rm=TRUE)
plot(interval_steps, type="l")
interval0=strtoi(names(which.max(interval_steps)))
hour0<-round(interval0/100)
minutes0<-interval0-(hour0*100)
interval1=interval0+5
hour1<-round(interval1/100)
minutes1<-interval1-(hour1*100)
table(interval_steps)
data.frame(interval_steps)
plot(interval_steps, type="l")
interval0=as.numeric(names(which.max(interval_steps)))
hour0<-round(interval0/100)
minutes0<-interval0-(hour0*100)
interval1=interval0+5
hour1<-round(interval1/100)
minutes1<-interval1-(hour1*100)
data.frame(interval_steps)
print("The interval with more steps as an average is the interval between ")
print(hour0 & ":" & minutes0)
print(hour0 , ":" , minutes0)
print(hour0, ":", minutes0)
print(c(hour0, ":", minutes0))
